add_rules("mode.debug", "mode.release", "mode.asan", "mode.check", "mode.tsan", "mode.lsan" ,"mode.ubsan","mode.valgrind")
add_rules("plugin.vsxmake.autoupdate")
add_rules("plugin.compile_commands.autoupdate")

set_languages("c17", "c++20")

set_warnings("allextra")

add_cxxflags("cl::/Za")
add_defines("UNICODE")

target("commons_lib_c")
  set_kind("static")
  add_files("src/commons/src/commons.c")
  add_files("src/commons/src/compiler/*.c")
  add_files("src/commons/src/os/*.c")

target("commons_lib_cpp")
  set_kind("static")
  add_files("src/commons/src/commons.c")
  add_files("src/commons/src/compiler/*.c")
  add_files("src/commons/src/os/*.cpp")

target("array_strings_c")
  set_kind("binary")
  add_deps("commons_lib_c")
  add_files("src/array_strings/src/array_strings.c")

target("array_strings_cpp")
  set_kind("binary")
  add_deps("commons_lib_cpp")
  add_files("src/array_strings/src/array_strings.cpp")

target("shellcode_gen_mingw_c")
  set_kind("binary")
  add_files("src/shellcode_generator/src/mingw/mingw.c")
  add_cflags("-masm=intel", {force = true})
  add_cflags("-Wno-int-conversion", {force = true})
  add_cflags("-O", {force = true})
  on_config(function (target)
    local cc = target:tool("cc")
    if cc and not string.find(cc, "mingw") then
      target:set("enabled", false)
      cprint("${yellow}Target: " .. target:name() .. " doesn't support MSVC compilation skipped")
      return
    end
  end)
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)

target("shellcode_gen_mingw_cpp")
  set_kind("binary")
  add_deps("commons_lib_cpp")
  add_files("src/shellcode_generator/src/gen_commons.cpp")
  add_files("src/shellcode_generator/src/mingw/mingw.cpp")
  add_cxxflags("-DUNICODE", {force = true})
  add_cxxflags("-masm=intel", {force = true})
  add_cxxflags("-Wno-int-conversion", {force = true})
  add_cxxflags("-O", {force = true})
  on_config(function (target)
    local cxx = target:tool("cxx")
    if cxx and not string.find(cxx, "mingw") then
      target:set("enabled", false)
      cprint("${yellow}Target: " .. target:name() .. " doesn't support MSVC compilation skipped")
      return
    end
  end)
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)

target("shellcode_gen_msvc_cpp")
  set_kind("binary")
  add_deps("commons_lib_cpp")
  add_cxxflags("cl::/Ob3", {force = true})
  add_files("src/shellcode_generator/src/gen_commons.cpp")
  add_files("src/shellcode_generator/src/msvc/msvc.cpp")
  set_toolchains("msvc")
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)

target("shellcode_gen_msvc_c")
  set_kind("binary")
  add_deps("commons_lib_c")
  add_cflags("cl::/Ob3", {force = true})
  add_cflags("cl::/Ox")
  add_files("src/shellcode_generator/src/msvc/msvc.c")
  set_toolchains("msvc")
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)

target("shellcode_runner_c")
  set_kind("binary")
  add_deps("commons_lib_c")
  add_files("src/shellcode_runner/src/shellcode_runner.c")
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)

target("shellcode_runner_cpp")
  set_kind("binary")
  add_deps("commons_lib_cpp")
  add_files("src/shellcode_runner/asm/shellcode.asm")
  add_files("src/shellcode_runner/src/shellcode_runner.cpp")
  on_run(function (target)
    os.execv(".\\" .. target:targetfile(), {}, {detach = true})
  end)